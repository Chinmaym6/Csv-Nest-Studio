{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91767\\\\Desktop\\\\csv-file-manager\\\\frontend\\\\src\\\\contexts\\\\ThemeContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const useTheme = () => {\n  _s();\n  return useContext(ThemeContext);\n};\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function ThemeProvider({\n  children\n}) {\n  _s2();\n  // Load from localStorage or default to light\n  const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'light');\n\n  // Whenever theme changes, set data-theme on <html> and persist\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n  const toggleTheme = () => {\n    setTheme(curr => curr === 'light' ? 'dark' : 'light');\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s2(ThemeProvider, \"sdN5stDE6MXWaThZodKo/2BHQLs=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","ThemeProvider","children","_s2","theme","setTheme","localStorage","getItem","document","documentElement","setAttribute","setItem","toggleTheme","curr","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/91767/Desktop/csv-file-manager/frontend/src/contexts/ThemeContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\nexport const useTheme = () => useContext(ThemeContext);\r\n\r\nexport function ThemeProvider({ children }) {\r\n  // Load from localStorage or default to light\r\n  const [theme, setTheme] = useState(\r\n    () => localStorage.getItem('theme') || 'light'\r\n  );\r\n\r\n  // Whenever theme changes, set data-theme on <html> and persist\r\n  useEffect(() => {\r\n    document.documentElement.setAttribute('data-theme', theme);\r\n    localStorage.setItem('theme', theme);\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(curr => (curr === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AACpC,OAAO,MAAMO,QAAQ,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,YAAY,CAAC;AAAA;AAACE,EAAA,CAA1CD,QAAQ;AAErB,OAAO,SAASE,aAAaA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EAC1C;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAChC,MAAMW,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,OACzC,CAAC;;EAED;EACAb,SAAS,CAAC,MAAM;IACdc,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEN,KAAK,CAAC;IAC1DE,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEP,KAAK,CAAC;EACtC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxBP,QAAQ,CAACQ,IAAI,IAAKA,IAAI,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACzD,CAAC;EAED,oBACEhB,OAAA,CAACC,YAAY,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAEX,KAAK;MAAEQ;IAAY,CAAE;IAAAV,QAAA,EAClDA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B;AAAChB,GAAA,CArBeF,aAAa;AAAAmB,EAAA,GAAbnB,aAAa;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
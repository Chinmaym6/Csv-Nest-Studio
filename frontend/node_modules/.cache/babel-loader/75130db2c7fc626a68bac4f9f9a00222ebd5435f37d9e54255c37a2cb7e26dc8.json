{"ast":null,"code":"// frontend/src/contexts/AuthContext.jsx\nimport React,{createContext,useContext,useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import api from'../api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>useContext(AuthContext);//\nexport function AuthProvider(_ref){let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const navigate=useNavigate();// On mount: if we have a token, verify it and fetch user ID\nuseEffect(()=>{const token=localStorage.getItem('token');if(!token){setLoading(false);return;}api.get('/protected').then(res=>{// extract userId from your protected endpoint’s message\nconst id=Number(res.data.message.match(/user (\\d+)/)[1]);setUser({id});}).catch(()=>{// invalid or expired token\nlocalStorage.removeItem('token');setUser(null);}).finally(()=>setLoading(false));},[]);// Sign up: receive token, store it, set user\nconst signup=async(name,email,password)=>{const res=await api.post('/signup',{name,email,password});const{token}=res.data;localStorage.setItem('token',token);// immediately verify and set user\nconst p=await api.get('/protected');const id=Number(p.data.message.match(/user (\\d+)/)[1]);setUser({id});navigate('/dashboard');};// Log in: receive token, store it, set user\nconst login=async(email,password)=>{const res=await api.post('/login',{email,password});const{token}=res.data;localStorage.setItem('token',token);// fetch user ID\nconst p=await api.get('/protected');const id=Number(p.data.message.match(/user (\\d+)/)[1]);setUser({id});navigate('/dashboard');};// Log out: client-side only\nconst logout=()=>{localStorage.removeItem('token');setUser(null);navigate('/login');};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,loading,signup,login,logout},children:children});}// frontend/src/contexts/AuthContext.jsx\n// import React, { createContext, useContext, useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import api from '../api';\n// import '../components/Auth.css';\n// const AuthContext = createContext();\n// export const useAuth = () => useContext(AuthContext);\n// export function AuthProvider({ children }) {\n//   const [user, setUser]     = useState(null);\n//   const [loading, setLoading] = useState(true);    // ← new\n//   const navigate            = useNavigate();\n// On mount, verify existing session\n// useEffect(() => {\n//   api.get('/protected')\n//     .then(res => {\n//       const id = res.data.message.match(/user (\\d+)/)[1];\n//       setUser({ id });\n//     })\n//     .catch(() => {\n//       setUser(null);\n//     })\n//     .finally(() => {\n//       setLoading(false);  // ← done checking\n//     });\n// }, []);\n// const signup = async (name, email, password) => {\n//   await api.post('/signup', { name, email, password });\n//   navigate('/login');\n// };\n// const login = async (email, password) => {\n//   await api.post('/login', { email, password });\n// re-fetch user ID\n//     const res = await api.get('/protected');\n//     const id  = res.data.message.match(/user (\\d+)/)[1];\n//     setUser({ id });\n//     navigate('/dashboard');\n//   };\n//   const logout = async () => {\n//     await api.post('/logout');\n//     setUser(null);\n//     navigate('/login');\n//   };\n//   return (\n//     <AuthContext.Provider value={{ user, loading, signup, login, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// }","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","api","jsx","_jsx","AuthContext","useAuth","AuthProvider","_ref","children","user","setUser","loading","setLoading","navigate","token","localStorage","getItem","get","then","res","id","Number","data","message","match","catch","removeItem","finally","signup","name","email","password","post","setItem","p","login","logout","Provider","value"],"sources":["C:/Users/91767/Desktop/csv-file-manager/frontend/src/contexts/AuthContext.jsx"],"sourcesContent":["\r\n// frontend/src/contexts/AuthContext.jsx\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport api from '../api';\r\n\r\nconst AuthContext = createContext();\r\nexport const useAuth = () => useContext(AuthContext);\r\n                                //\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser]       = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate              = useNavigate();\r\n\r\n  // On mount: if we have a token, verify it and fetch user ID\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    api.get('/protected')\r\n      .then(res => {\r\n        // extract userId from your protected endpoint’s message\r\n        const id = Number(res.data.message.match(/user (\\d+)/)[1]);\r\n        setUser({ id });\r\n      })\r\n      .catch(() => {\r\n        // invalid or expired token\r\n        localStorage.removeItem('token');\r\n        setUser(null);\r\n      })\r\n      .finally(() => setLoading(false));\r\n  }, []);\r\n\r\n  // Sign up: receive token, store it, set user\r\n  const signup = async (name, email, password) => {\r\n    const res = await api.post('/signup', { name, email, password });\r\n    const { token } = res.data;\r\n    localStorage.setItem('token', token);\r\n\r\n    // immediately verify and set user\r\n    const p = await api.get('/protected');\r\n    const id = Number(p.data.message.match(/user (\\d+)/)[1]);\r\n    setUser({ id });\r\n\r\n    navigate('/dashboard');\r\n  };\r\n\r\n  // Log in: receive token, store it, set user\r\n  const login = async (email, password) => {\r\n    const res = await api.post('/login', { email, password });\r\n    const { token } = res.data;\r\n    localStorage.setItem('token', token);\r\n\r\n    // fetch user ID\r\n    const p = await api.get('/protected');\r\n    const id = Number(p.data.message.match(/user (\\d+)/)[1]);\r\n    setUser({ id });\r\n\r\n    navigate('/dashboard');\r\n  };\r\n\r\n  // Log out: client-side only\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n    navigate('/login');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, signup, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// frontend/src/contexts/AuthContext.jsx\r\n// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import api from '../api';\r\n// import '../components/Auth.css';\r\n\r\n// const AuthContext = createContext();\r\n// export const useAuth = () => useContext(AuthContext);\r\n\r\n// export function AuthProvider({ children }) {\r\n//   const [user, setUser]     = useState(null);\r\n//   const [loading, setLoading] = useState(true);    // ← new\r\n//   const navigate            = useNavigate();\r\n\r\n  // On mount, verify existing session\r\n  // useEffect(() => {\r\n  //   api.get('/protected')\r\n  //     .then(res => {\r\n  //       const id = res.data.message.match(/user (\\d+)/)[1];\r\n  //       setUser({ id });\r\n  //     })\r\n  //     .catch(() => {\r\n  //       setUser(null);\r\n  //     })\r\n  //     .finally(() => {\r\n  //       setLoading(false);  // ← done checking\r\n  //     });\r\n  // }, []);\r\n\r\n  // const signup = async (name, email, password) => {\r\n  //   await api.post('/signup', { name, email, password });\r\n  //   navigate('/login');\r\n  // };\r\n\r\n  // const login = async (email, password) => {\r\n  //   await api.post('/login', { email, password });\r\n    // re-fetch user ID\r\n//     const res = await api.get('/protected');\r\n//     const id  = res.data.message.match(/user (\\d+)/)[1];\r\n//     setUser({ id });\r\n//     navigate('/dashboard');\r\n//   };\r\n\r\n//   const logout = async () => {\r\n//     await api.post('/logout');\r\n//     setUser(null);\r\n//     navigate('/login');\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ user, loading, signup, login, logout }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}